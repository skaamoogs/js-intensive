console.log("1");
setTimeout(() => console.log("2"), 1);
let promiseNew = new Promise((resolve) => {
  console.log("3");
  resolve();
});
promiseNew.then(() => console.log("4"));
setTimeout(() => console.log("5"));
console.log("6");

/**
 * Сначала выолняется синхронный код основного скрипта:
 * 1. Выводится '1'.
 * 2. Выполняется setTimeout, т.е. запускается таймер.
 * Продолжается выполнение основного кода.
 * Через 1 мс console.log("2") из setTimeout помещается в очередь макрозадач.
 * 3. Создается промис. Код внутри колбэка промиса выполняется синхронно,
 * т.е. сразу будет выведено '3', промис будет зарезолвлен.
 * 4. Т.к. promiseNew уже зарезолвлен, то console.log('4') поместится в очередь микрозадач.
 * 5. Запускается таймер с нулевой задержкой, после завершения таймера в очередь макрозадач будет добавлен
 * console.log('5').
 * 6. Выводится '6'.
 * 7. Задачи из очереди микрозадач ([console.log('4')]) помещаются в стек вызова,
 * т.е. выводится '4'.
 * 8. Выполняется старейшая задача из
 * очереди макрозадач ([console.log('2'), console.log('5')]),
 * поэтому выводится '2' (если перед добавлением в очередь console.log('5') уже прошла 1 мс),
 * либо выводится '5' (например в node).
 * 9. Т.к. в стеке вызовов и в очереди микрозадач ничего нет,
 * то выполняется следующая макрозадача, т.е. выводится '5' или '2'.
 *
 * В итоге вывод будет такой: 1 3 6 4 5(2) 2(5)
 */
